formulaText <- paste(formulaText, thisSlope, sep = "+")
}
}
}
thisFormula <- as.formula(formulaText)
print(thisFormula)
if(!is.null(pth$glmerText) | pth$intercepts | pth$slopes){
thisMod<-glmer(thisFormula, pth$DF) # run a mixed glm
theseCoef<-attr(thisMod, "fixef")
} else {
thisMod<-lm(thisFormula, pth$DF)
theseCoef <- coefficients(summary(thisMod))[,"Estimate"] #otherwise run a normal linear model
}
print(thisMod)
output = list()
output.mod = thisMod
output.coef = theseCoef
return(output)
}
directPathCoeffs(pth)
runRegression <- function(pth, DV, IVs){
IVsCombined  <- paste( c(IVs) , collapse = "+" )
formulaText <- paste( DV, IVsCombined , sep = "~" )
for(j in 1:length(pth$covs)){
formulaText <- paste(formulaText, pth$covs[j], sep = "+")
}
if(!is.null(pth$glmerText)){
formulaText <- paste(formulaText, pth$glmerText, sep = "+")
}
for(j in 1:length(pth$RFX)){
if(pth$intercepts){
thisRandEffect<-paste('(1|',pth$RFX[j],')', sep = "")
formulaText <- paste(formulaText, thisRandEffect, sep = "+")
}
if(pth$slopes){
for(k in 1:length(IVs)){
thisSlope<-paste('(', IVs[k], '+0|', pth$RFX[k], ')', sep = "")
formulaText <- paste(formulaText, thisSlope, sep = "+")
}
}
}
thisFormula <- as.formula(formulaText)
print(thisFormula)
if(!is.null(pth$glmerText) | pth$intercepts | pth$slopes){
thisMod<-glmer(thisFormula, pth$DF) # run a mixed glm
theseCoef<-attr(thisMod, "fixef")
} else {
thisMod<-lm(thisFormula, pth$DF)
theseCoef <- coefficients(summary(thisMod))[,"Estimate"] #otherwise run a normal linear model
}
output = list()
output.mod = thisMod
output.coef = theseCoef
print(output)
return(output)
}
directPathCoeffs(pth)
runRegression <- function(pth, DV, IVs){
IVsCombined  <- paste( c(IVs) , collapse = "+" )
formulaText <- paste( DV, IVsCombined , sep = "~" )
for(j in 1:length(pth$covs)){
formulaText <- paste(formulaText, pth$covs[j], sep = "+")
}
if(!is.null(pth$glmerText)){
formulaText <- paste(formulaText, pth$glmerText, sep = "+")
}
for(j in 1:length(pth$RFX)){
if(pth$intercepts){
thisRandEffect<-paste('(1|',pth$RFX[j],')', sep = "")
formulaText <- paste(formulaText, thisRandEffect, sep = "+")
}
if(pth$slopes){
for(k in 1:length(IVs)){
thisSlope<-paste('(', IVs[k], '+0|', pth$RFX[k], ')', sep = "")
formulaText <- paste(formulaText, thisSlope, sep = "+")
}
}
}
thisFormula <- as.formula(formulaText)
print(thisFormula)
if(!is.null(pth$glmerText) | pth$intercepts | pth$slopes){
thisMod<-glmer(thisFormula, pth$DF) # run a mixed glm
theseCoef<-attr(thisMod, "fixef")
} else {
thisMod<-lm(thisFormula, pth$DF)
theseCoef <- coefficients(summary(thisMod))[,"Estimate"] #otherwise run a normal linear model
}
output = list()
output$mod = thisMod
output$coef = theseCoef
print(output)
return(output)
}
directPathCoeffs(pth)
source("MultiLevelPathAnalysis2.R")
pth = directPathCoeffs(pth)
pth
source("MultiLevelPathAnalysis2.R")
pth = directPathCoeffs(pth)
pth = directPathCoeffs(pth)
pth = directPathCoeffs(pth)
pth = directPathCoeffs(pth)
pth = directPathCoeffs(pth)
pth = directPathCoeffs(pth)
pth = directPathCoeffs(pth)
pth = directPathCoeffs(pth)
source("MultiLevelPathAnalysis2.R")
pth = directPathCoeffs(pth)
pth = directPathCoeffs(pth)
pth = directPathCoeffs(pth)
pth = directPathCoeffs(pth)
directPathCoeffs
directPathCoeffs <- function(pth){
coefMatrix = pth$connectionMatrix
coefMatrix[,] = 0
print("hello?")
modelList<-list()
eq = 0
for( i in 1:ncol(pth$connectionMatrix) ){
thisCol<-pth$connectionMatrix[,i]
print(thisCol)
if(sum(thisCol)>0){
IVs<-pth$varNames[thisCol==1]
DV = pth$varNames[i]
thisReg = runRegression(pth, DV, IVs)
eq = eq+1
print(thisReg)
modelList[[eq]] = thisReg$mod
colsToReplace = which(thisCol==1)
coefMatrix[colsToReplace,i] = thisReg$coef[2:(1+length(colsToReplace))]
}
}
pth$coefMatrix = coefMatrix
pth$modelList = modelList
return(pth)
}
directPathCoeffs(pth)
pth<-directPathCoeffs(pth)
pth
pth
pth
pth = findIndirectPathsWrapper(pth)
pth
pth$IP
pth = indirectPathCoefs(pth)
pth$IP
pth = bootStrapCoefs(pth)
source("MultiLevelPathAnalysis2.R")
rm(list = ls(all=TRUE))
source("MultiLevelPathAnalysis2.R")
pth = makePathObj(paths, DF, covs, RFX, nBootReps = 100)
pth = getVarNames(pth)
pth = makeConnectionMatrix(pth)
pth = directPathCoeffs(pth)
pth
source("MultiLevelPathAnalysis2.R")
pth = directPathCoeffs(pth)
pth
runRegression
source("MultiLevelPathAnalysis2.R")
pth = directPathCoeffs(pth)
directPathCoeffs
source("MultiLevelPathAnalysis2.R")
pth = directPathCoeffs(pth)
pth
pth = findIndirectPathsWrapper(pth)
pth = indirectPathCoefs(pth)
pth = bootStrapCoefs(pth)
source("MultiLevelPathAnalysis2.R")
pathRes<-pathAnalysis(paths, DF, covs, RFX, nBootReps = 100)
pathRes
source("MultiLevelPathAnalysis2.R")
pth = dSepTest(pth)
source("MultiLevelPathAnalysis2.R")
pth = dSepTest(pth)
pth$connectionMatrix
source("MultiLevelPathAnalysis2.R")
pth = dSepTest(pth)
source("MultiLevelPathAnalysis2.R")
pth = dSepTest(pth)
source("MultiLevelPathAnalysis2.R")
pth = dSepTest(pth)
source("MultiLevelPathAnalysis2.R")
pth = dSepTest(pth)
source("MultiLevelPathAnalysis2.R")
pth = dSepTest(pth)
source("MultiLevelPathAnalysis2.R")
pth = dSepTest(pth)
source("MultiLevelPathAnalysis2.R")
pth = dSepTest(pth)
source("MultiLevelPathAnalysis2.R")
pth = dSepTest(pth)
a
a<-c(3,3,3,2,3,3,2)
a
a[c(TRUE,FALSE,TRUE)]
a[c(TRUE,FALSE,TRUE,FALSE,FALSE,FALSE)]
source("MultiLevelPathAnalysis2.R")
pth = dSepTest(pth)
source("MultiLevelPathAnalysis2.R")
pth = dSepTest(pth)
source("MultiLevelPathAnalysis2.R")
pth = dSepTest(pth)
source("MultiLevelPathAnalysis2.R")
pth = dSepTest(pth)
source("MultiLevelPathAnalysis2.R")
pth = dSepTest(pth)
source("MultiLevelPathAnalysis2.R")
pth = dSepTest(pth)
source("MultiLevelPathAnalysis2.R")
pth = dSepTest(pth)
source("MultiLevelPathAnalysis2.R")
pth = dSepTest(pth)
source("MultiLevelPathAnalysis2.R")
pth = dSepTest(pth)
source("MultiLevelPathAnalysis2.R")
pth = dSepTest(pth)
source("MultiLevelPathAnalysis2.R")
pth = dSepTest(pth)
source("MultiLevelPathAnalysis2.R")
pth = dSepTest(pth)
source("MultiLevelPathAnalysis2.R")
pth = dSepTest(pth)
source("MultiLevelPathAnalysis2.R")
pth = dSepTest(pth)
source("MultiLevelPathAnalysis2.R")
pth = dSepTest(pth)
source("MultiLevelPathAnalysis2.R")
pth = dSepTest(pth)
r<-lmer(DV~IV+MV2+c1+(1|subs)+(IV+0|subs)+(MV2+0|subs), data = DV)
DV
r<-lmer(DV~IV+MV2+c1+(1|subs)+(IV+0|subs)+(MV2+0|subs), data = DF)
r
attributes(r)
r
fixef(r)
source("MultiLevelPathAnalysis2.R")
LRT(r)
source("MultiLevelPathAnalysis2.R")
source("MultiLevelPathAnalysis2.R")
r<-lmer(DV~IV+MV2+c1+(1|subs)+(IV+0|subs)+(MV2+0|subs), data = DF, REML=FALSE)
LRT(r)
source("MultiLevelPathAnalysis2.R")
pth = dSepTest(pth)
source("MultiLevelPathAnalysis2.R")
pth = dSepTest(pth)
source("MultiLevelPathAnalysis2.R")
pth = dSepTest(pth)
source("MultiLevelPathAnalysis2.R")
pth = dSepTest(pth)
source("MultiLevelPathAnalysis2.R")
pth = dSepTest(pth)
source("MultiLevelPathAnalysis2.R")
pth = dSepTest(pth)
source("MultiLevelPathAnalysis2.R")
pth = dSepTest(pth)
source("MultiLevelPathAnalysis2.R")
pth = dSepTest(pth)
source("MultiLevelPathAnalysis2.R")
pth = dSepTest(pth)
source("MultiLevelPathAnalysis2.R")
source("MultiLevelPathAnalysis2.R")
pth = dSepTest(pth)
source("MultiLevelPathAnalysis2.R")
pth = dSepTest(pth)
source("MultiLevelPathAnalysis2.R")
pth = dSepTest(pth)
source("MultiLevelPathAnalysis2.R")
pth = dSepTest(pth)
source("MultiLevelPathAnalysis2.R")
pth = dSepTest(pth)
r
LRT(r)
r
source("MultiLevelPathAnalysis2.R")
pth = dSepTest(pth)
LRT(r)
source("MultiLevelPathAnalysis2.R")
pth = dSepTest(pth)
r
frm = as.formula(DV ~ IV + MV2 + c1 + (1 | subs) + (IV + 0 | subs) + (MV2 + 0 |      subs) )
lmer(frm, data = DF, REML = FALSE)
r2 = lmer(frm, data = DF, REML = FALSE)
LRT(r2)
frm
as.character(frm)
paste(as.character(frm))
attributes(frm)
frm[1]
frm[2]
frm[3]
paste(frm, "  ~ ", paste(attr(terms(my.formula), "term.labels"),collapse= " + "),sep="")
paste(frm, "  ~ ", paste(attr(terms(frm), "term.labels"),collapse= " + "),sep="")
paste(frm[2], "  ~ ", paste(attr(terms(frm), "term.labels"),collapse= " + "),sep="")
r2
attriutes(r2)
attributes(r2)
source("MultiLevelPathAnalysis2.R")
pth = dSepTest(pth)
r = ("hi hello how are you")
r
eval(r)
source("MultiLevelPathAnalysis2.R")
pth = dSepTest(pth)
help(eval)
r
eval(r)
evalq(r)
r
r2
attributes(r2)
model.frame(r2)
formula(r2)
r2$model
attr(r2, "term.labels")
attributes(r2)
frm
frm2<-as.formula(DV~IV+MV2)
lm(frm2,data=DF)
summary(lm)
r3<-lm(frm2,data=DF)
summary(r3)
formula(r3)
formula(r2)
eval(formula(r2))
lmer(eval(formula(r2)), data=DF)
lmer((eval(formula(r2))), data=DF)
r2
r2@call
as.character(r2@call)
url = "http://ww2.coastal.edu/kingw/statistics/R-tutorials/text/groceries.txt"
groceries = read.table(url, header=T)
groceries
stack(groceries)
subject = rep(groceries$subject,4)
groceries2[3] = subject
groceries
groceries2<-stack(groceries)
groceries2
groceries2[3] = subject
groceries2
aov(price ~ store + Error(subject/store))
aov(price ~ store + Error(subject/store), data = groceries2)
aov(values ~ ind + Error(V3/ind), data = groceries2)
summary(aov(values ~ ind + Error(V3/ind), data = groceries2))
rownames(groceries2)
colnames(groceries2)
colnames(groceries2) <- c("price", "store", "item")
groceries2
colnames(groceries2) <- c("accuracy", "ROI", "subject")
colnames(groceries2) <- c("accuracy", "ROI", "channel")
groceries2
band = rep(1,40)
band
band = c(rep(1,40),rep(2,40))
band
g3<-c(g2,g2)
g3<-c(groceries2,groceries2)
g3
g3$band = band
g3$accuracy = rep(groceries2$accuracy,2)
g3
groceries2
groceries2[3] = c(1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2)
groceries2
groceries2[4] = subject
grociers2
groceries2
rownames(groceries2)
colnames(groceries2)
colnames(groceries2) = c("accuracy" "ROI"      "band"  "channel")
colnames(groceries2) = c("accuracy" "ROI"   ,   "band" , "channel")
colnames(groceries2) = c("accuracy", "ROI"   ,   "band" , "channel")
groceries2
head(groceries2)
aov(accuracy ~ ROI*band + Error(channel/(ROI*band)),data=groceries2)
sample(groceries2[3])
a<-sample(groceries2[3])
a
sample(groceries2[3],40)
sample(40,groceries2[3])
sample(40)
round(sample(40)/20)
ceil(sample(40)/20)
ceiling(sample(40)/20)
groceries2[3] = ceiling(sample(40)/20)
head(groceries2)
aov(accuracy ~ ROI*band + Error(channel/(ROI*band)),data=groceries2)
r1<-aov(accuracy ~ ROI*band + Error(channel/(ROI*band)),data=groceries2)
summary(r1)
contrasts(r1)
g2 = groceries2
g2
contrasts(g2$ROI)
r1<-aov(accuracy ~ ROI*band + Error(channel/(ROI*band)),data=groceries2)
summary(aov(accuracy ~ ROI*band + Error(channel/(ROI*band)),data=groceries2))
summary(aov(accuracy ~ ROI*band + Error(channel),data=groceries2))
summary(aov(accuracy ~ ROI*band + Error(channel/ROI),data=groceries2))
summary(aov(accuracy ~ ROI*band,data=groceries2))
summary(aov(accuracy ~ ROI*band + Error(band),data=groceries2))
summary(aov(accuracy ~ ROI*band + Error(channel),data=groceries2))
summary(aov(accuracy ~ ROI*band + Error(channel/ROI),data=groceries2))
summary(aov(accuracy ~ ROI + Error(channel/ROI),data=groceries2))
summary(aov(accuracy ~ ROI + Error(channel),data=groceries2))
summary(aov(accuracy ~ ROI ,data=groceries2))
summary(aov(accuracy ~ ROI + Error(channel),data=groceries2))
summary(aov(accuracy ~ ROI + Error(channel/band),data=groceries2))
dat<-data.frame(fac1=gl(4,8,labels=LETTERS[1:4]),
fac2=rep(c("I","II"),16),y=rnorm(32,1,1))
mod<-lm(y~fac1*fac2,data=dat)
head(dat)
mod
summary(mod)
help(glht)
install.packages(multcomp)
install.packages("multcomp")
library(multcomp)
mod
glht(mod)
glht(mod, c(0,1,0,0,0,0,0,0))
c2<-rbind("fac2-effect in A"=c(0,1,0,0,0,0,0,0),
"fac2-effect in B"=c(0,1,0,0,0,1,0,0),
"fac2-effect in C"=c(0,1,0,0,0,0,1,0),
"fac2-effect in D"=c(0,1,0,0,0,0,0,1),
"fac2-effect, A*B"=c(0,0,0,0,0,1,0,0),
"fac2-effect, A*C"=c(0,0,0,0,0,0,1,0),
"fac2-effect, A*D"=c(0,0,0,0,0,0,0,1),
"fac2-effect, B*C"=c(0,0,0,0,0,-1,1,0),
"fac2-effect, B*D"=c(0,0,0,0,0,-1,0,1),
"fac2-effect, C*D"=c(0,0,0,0,0,0,-1,1))
c2
summary(glht(mod,c2))
help(glht)
r1
summary(r1)
glht(r1)
TukeyHSD(r1)
K <- matrix(c(0, 0, 1, -1, 0, 0, 0), 1)
K
g2
g2$ROI
g2$band
g2$band<-as.factor(g2$band)
g2$channel
head(g2)
r1<-aov(accuracy ~ ROI*band + Error(channel/(ROI*band)),data=groceries2)
summary(r1)
K1 <- matrix(c(1,-1), 1)
glht(r1,K1)
r1
r1<-aov(accuracy ~ ROI*band + Error(channel/(ROI*band)),data=groceries2)
g2
g3<-make.rm(constant = c("accuracy","roi","band"), repeated = "channel", data = g2)
make.rm<-function(constant,repeated,data,contrasts) {
if(!missing(constant) && is.vector(constant)) {
if(!missing(repeated) && is.vector(repeated)) {
if(!missing(data)) {
dd<-dim(data)
replen<-length(repeated)
if(missing(contrasts))
contrasts<-
ordered(sapply(paste("T",1:length(repeated),sep=""),rep,dd[1]))
else
contrasts<-matrix(sapply(contrasts,rep,dd[1]),ncol=dim(contrasts)[2])
if(length(constant) == 1) cons.col<-rep(data[,constant],replen)
else cons.col<-lapply(data[,constant],rep,replen)
new.df<-data.frame(cons.col,
repdat=as.vector(data.matrix(data[,repeated])),
contrasts)
return(new.df)
}
}
}
cat("Usage: make.rm(constant, repeated, data [, contrasts])\n")
cat("\tWhere 'constant' is a vector of indices of non-repeated data and\n")
cat("\t'repeated' is a vector of indices of the repeated measures data.\n")
}
g3<-make.rm(constant = c("accuracy","roi","band"), repeated = "channel", data = g2)
head(g2)
g3<-make.rm(constant = c("accuracy","ROI","band"), repeated = "channel", data = g2)
g3
r2
frm
lm(frm, data = DF)
lmer(frm, data = DF)
do.call("lmer", args=list(frm, data = DF))
a<-do.call("lmer", args=list(frm, data = DF))
a
class(a)
summary(a)
a<-do.call("lmer", args=list(frm, data = as.name("DF")))
a
class(frm)
source("MultiLevelPathAnalysis2.R")
dSepTest(pth)
source("MultiLevelPathAnalysis2.R")
dSepTest(pth)
pth<-dSepTest(pth)
pth
pth<-dSepTest(pth)
source("MultiLevelPathAnalysis2.R")
pth<-dSepTest(pth)
pth$pVals
sum(pth$pVals)
log(pth$pVals)
-2*sum(log(pth$pVals))
a=-2*sum(log(pth$pVals))
chisq(a)
pchisq(a,2)
source("MultiLevelPathAnalysis2.R")
pth<-dSepTest(pth)
pth$MF
